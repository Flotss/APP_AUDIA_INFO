{% extends '/base.html.twig' %}

{% block title %}
	Profile
{% endblock %}

{% block stylesheet %}
    <link rel="stylesheet" href="/template/composant/profile/style.css">
{% endblock %}


{% block body %}
<div class="container-profile-edit">
    <form action="/profile" method="POST" id="profile-form">
        <div class="profile-picture">
            <input type="file" name="image" accept="image/*" class="profile-input">
            <img src="{{ user.image }}" class="profile-image">
        </div>
        <div class="input-field">
            <input class="input" type="text" placeholder=" " name="firstName" id="nom" value="{{ user.firstName }}" required>
            <label for="nom">Nom</label>
        </div>
        <div class="input-field">
            <input class="input" type="text" placeholder=" " name="lastName" id="prenom" value="{{ user.lastName }}" required>
            <label for="prenom">Prénom</label>
        </div>
        <div class="input-field">
            <input class="input" type="text" placeholder=" " name="username" id="username" value="{{ user.username }}" required>
            <label for="username">Nom d'utilisateur</label>
        </div>
        <div class="input-field">
            <input class="input" type="email" placeholder=" " name="email" id="email" value="{{ user.email }}" required>
            <label for="email">Adresse email</label>
        </div>
        <div class="input-field">
            <input class="input" type="tel" placeholder=" " name="phone" id="telephone" value="{{ user.phone }}">
            <label for="telephone">Numéro de téléphone</label>
        </div>
        <div class="input-field">
            <input class="input" type="text" placeholder=" " name="location" id="adresse" value="{{ user.location }}">
            <label for="adresse">Adresse postale</label>
        </div>
        <div class="select-field">
            <select class="select" name="preference_acoustique" id="preferences_acoustiques" onchange="onChange(this)">
                {% for option in preferences_acoustique_options %}
                    <option value="{{ option.name }}" {% if preferences_acoustique == option.name %}selected{% endif %}>{{ option.name }}</option>
                {% endfor %}
            </select>
            <label for="preferences_acoustiques">Préférences acoustiques</label>
        </div>
        <div class="select-field">
            <select class="select" name="preference_temperature" id="preferences_temperature" onchange="onChange(this)">
                {% for option in preferences_temperature_options %}
                    <option value="{{ option.name }}" {% if preferences_temperature == option.name %}selected{% endif %}>{{ option.name }}</option>
                {% endfor %}
            </select>
            <label for="preferences_temperature">Préférences de température</label>
        </div>

        <button class="button" type="button">Modifier MDP</button>
        <button class="button" type="submit">Enregistrer</button>
    </form>
</div>
{% endblock %}

{% block javascript %}
<script>
    const inputs = document.querySelectorAll('.input');
    const selects = document.querySelectorAll('.select');
    const initialValues = {};

    inputs.forEach((input) => {
        // Store the initial value of each input
        initialValues[input.name] = input.value;

        input.addEventListener('input', function() {
            if (isModified(input)) {
                input.classList.add('modified');
            } else {
                input.classList.remove('modified');
            }
        });
    });

    selects.forEach((select) => {
        // Store the initial value of each select
        initialValues[select.name] = select.value;
    });

    // Check if any input value has been modified
    function isModified(element = null) {
        let modified = false;

        if (element) {
            modified = element.value !== initialValues[element.name];
        } else {
            inputs.forEach((input) => {
                if (input.value !== initialValues[input.name]) {
                    modified = true;
                }
            });

            selects.forEach((select) => {
                if (select.value !== initialValues[select.name]) {
                    modified = true;
                }
            });
        }

        return modified;
    }

    function onChange(element) {
        if (isModified(element)) {
            element.classList.add('modified');
        } else {
            element.classList.remove('modified');
        }
    }


    // IMAGE
    const profilePicture = document.querySelector('.profile-picture');
    const profileInput = document.querySelector('.profile-input');
    const profileImage = document.querySelector('.profile-image');

    profileInput.addEventListener('change', function() {
        const file = this.files[0];

        if (file) {
            const reader = new FileReader();

             reader.addEventListener('load', function() {
                const image = new Image();
                image.src = reader.result;
                image.onload = function() {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    const maxWidth = 800;
                    const maxHeight = 800;
                    let width = image.width;
                    let height = image.height;

                    if (width > maxWidth || height > maxHeight) {
                        // Calculate the new dimensions with the same aspect ratio
                        if (width > height) {
                            height *= maxWidth / width;
                            width = maxWidth;
                        } else {
                            width *= maxHeight / height;
                            height = maxHeight;
                        }
                    }

                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(image, 0, 0, width, height);

                    const compressedImage = canvas.toDataURL('image/jpeg', 0.7);

                    profileImage.src = compressedImage;
                    console.log(compressedImage);

                    // Create a hidden input to hold the base64 image
                    let hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'imageBase64';
                    hiddenInput.value = compressedImage;

                    // Append the hidden input to the form
                    let form = document.getElementById('profile-form');
                    form.appendChild(hiddenInput);
                };
            });

            reader.readAsDataURL(file);
        }
    });

   

    // FORM
    const form = document.querySelector('form');
    const button = document.querySelector('.button');

    button.addEventListener('click', function() {
        form.action = '/profile/password';
        form.submit();
    });
</script>
{% endblock %}